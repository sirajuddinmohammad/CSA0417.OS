#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

void printOddNumbers()
{
    pid_t pid = getpid();
    printf("Child Process 1 (PID %d): Odd Numbers\n", pid);

    for (int i = 1; i <= 10; i += 2)
    {
        printf("%d ", i);
    }
    printf("\n");
}

void printEvenNumbers()
{
    pid_t pid = getpid();
    printf("Child Process 2 (PID %d): Even Numbers\n", pid);

    for (int i = 2; i <= 10; i += 2)
    {
        printf("%d ", i);
    }
    printf("\n");
}

void printMultiplesOfThree()
{
    pid_t pid = getpid();
    printf("Child Process 3 (PID %d): Multiples of 3\n", pid);

    for (int i = 3; i <= 30; i += 3)
    {
        printf("%d ", i);
    }
    printf("\n");
}

void printMultiplesOfFive()
{
    pid_t pid = getpid();
    printf("Child Process 4 (PID %d): Multiples of 5\n", pid);

    for (int i = 5; i <= 50; i += 5)
    {
        printf("%d ", i);
    }
    printf("\n");
}

int main()
{
    pid_t child_pid[4];

    for (int i = 0; i < 4; i++)
    {
        child_pid[i] = fork();

        if (child_pid[i] < 0)
        {
            printf("Fork failed.\n");
            return 1;
        }
        else if (child_pid[i] == 0)
        {
            
            switch (i)
            {
            case 0:
                printOddNumbers();
                break;
            case 1:
                printEvenNumbers();
                break;
            case 2:
                printMultiplesOfThree();
                break;
            case 3:
                printMultiplesOfFive();
                break;
            }

            return 0;
        }
    }
    for (int i = 0; i < 4; i++)
    {
        waitpid(child_pid[i], NULL, 0);
    }

    return 0;
}
