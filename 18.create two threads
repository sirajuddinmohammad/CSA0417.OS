#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_THREADS 2

int sharedData;
sem_t semaphore;

void* doubleThread(void* arg) {
    sem_wait(&semaphore);  

    sharedData = sharedData * 2;  
    printf("Double: %d\n", sharedData);

    sem_post(&semaphore);  
    pthread_exit(NULL);
}

void* printThread(void* arg) {
    sem_wait(&semaphore); 
    int tempData = sharedData;
    sharedData = sharedData * 5; 
    printf("Print: %d\n", sharedData);
    sharedData = tempData;  

    sem_post(&semaphore);  
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int rc;

     
    sem_init(&semaphore, 0, 1);

     
    sharedData = 10;

     
    rc = pthread_create(&threads[0], NULL, doubleThread, NULL);
    if (rc) {
        printf("Error creating thread: %d\n", rc);
        exit(-1);
    }

    rc = pthread_create(&threads[1], NULL, printThread, NULL);
    if (rc) {
        printf("Error creating thread: %d\n", rc);
        exit(-1);
    }

    
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    
    sem_destroy(&semaphore);

    return 0;
}
