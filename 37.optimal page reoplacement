#include <stdio.h>

int search(int key, int frames[], int n)
{
    for (int i = 0; i < n; i++) {
        if (frames[i] == key) {
            return 1;
        }
    }
    return 0;
}

int findOptimal(int page[], int n, int frames[], int capacity)
{
    int faults = 0;
    int pos;
    for (int i = 0; i < n; i++) {
        if (!search(page[i], frames, capacity)) {
            if (faults < capacity) {
                frames[faults++] = page[i];
            }
            else {
                int farthest = 0;
                int j;
                for (j = 0; j < capacity; j++) {
                    int found = 0;
                    for (int k = i + 1; k < n; k++) {
                        if (frames[j] == page[k]) {
                            found = 1;
                            if (k > farthest) {
                                farthest = k;
                                pos = j;
                            }
                            break;
                        }
                    }
                    if (!found) {
                        pos = j;
                        break;
                    }
                }
                frames[pos] = page[i];
                faults++;
            }
        }
    }
    return faults;
}

int main()
{
    int capacity = 3; 
    int n = 8; 
    int page[] = {4, 1, 2, 4, 3, 2, 1, 5};
    int frames[capacity];

    for (int i = 0; i < capacity; i++) {
        frames[i] = -1; 
    }

    int page_faults = findOptimal(page, n, frames, capacity);

    printf("Number of page faults: %d\n", page_faults);

    return 0;
}
